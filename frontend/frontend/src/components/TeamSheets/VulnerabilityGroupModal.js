import React, { useState, useEffect } from 'react';
import sheetService from '../../services/sheetService';

const VulnerabilityGroupModal = ({ 
  isOpen, 
  onClose, 
  vulnerabilityId, 
  vulnerabilityInfo 
}) => {
  const [groupData, setGroupData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [selectedView, setSelectedView] = useState('by_site');

  useEffect(() => {
    if (isOpen && vulnerabilityId) {
      loadVulnerabilityGroup();
    }
  }, [isOpen, vulnerabilityId]);

  const loadVulnerabilityGroup = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await sheetService.getVulnerabilityGroup(vulnerabilityId);
      setGroupData(data);
    } catch (err) {
      setError(err.message || 'Failed to load vulnerability group');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  const getStatusBadge = (status) => {
    const statusClasses = {
      'investigating': 'bg-warning',
      'awaiting_patch': 'bg-info',
      'testing_patch': 'bg-primary',
      'patched': 'bg-success',
      'patch_scheduled': 'bg-secondary'
    };
    
    return (
      <span className={`badge ${statusClasses[status] || 'bg-light text-dark'}`}>
        {status || 'Not Started'}
      </span>
    );
  };

  if (!isOpen) return null;

  return (
    <div className="modal fade show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog modal-xl">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">
              <i className="fas fa-layer-group me-2"></i>
              Vulnerability Group - {vulnerabilityInfo?.product_name || 'Unknown'}
            </h5>
            <button 
              type="button" 
              className="btn-close" 
              onClick={onClose}
              disabled={loading}
            ></button>
          </div>
          
          <div className="modal-body">
            {loading && (
              <div className="text-center py-4">
                <div className="spinner-border text-primary" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
                <div className="mt-2">Loading vulnerability group...</div>
              </div>
            )}

            {error && (
              <div className="alert alert-danger">
                <i className="fas fa-exclamation-triangle me-2"></i>
                {error}
              </div>
            )}

            {groupData && (
              <>
                {/* Vulnerability Summary */}
                <div className="card mb-3">
                  <div className="card-header">
                    <h6 className="mb-0">
                      <i className="fas fa-info-circle me-2"></i>
                      Vulnerability Overview
                    </h6>
                  </div>
                  <div className="card-body">
                    <div className="row">
                      <div className="col-md-3">
                        <small className="text-muted">CVE:</small>
                        <div className="fw-bold">
                          {groupData.vulnerability.cve ? (
                            <code>{groupData.vulnerability.cve}</code>
                          ) : 'N/A'}
                        </div>
                      </div>
                      <div className="col-md-3">
                        <small className="text-muted">Product:</small>
                        <div className="fw-bold">{groupData.vulnerability.product_name}</div>
                      </div>
                      <div className="col-md-3">
                        <small className="text-muted">Vendor:</small>
                        <div className="fw-bold">{groupData.vulnerability.oem_vendor}</div>
                      </div>
                      <div className="col-md-3">
                        <small className="text-muted">Risk Level:</small>
                        <div>
                          <span className={`badge ${
                            groupData.vulnerability.risk_level === 'Critical' || groupData.vulnerability.risk_level === 'High' ? 'bg-danger' :
                            groupData.vulnerability.risk_level === 'Medium' ? 'bg-warning text-dark' : 'bg-success'
                          }`}>
                            {groupData.vulnerability.risk_level || 'Unknown'}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="row mt-3">
                      <div className="col-md-4">
                        <small className="text-muted">Total Instances:</small>
                        <div className="h5 text-primary mb-0">{groupData.total_instances}</div>
                      </div>
                      <div className="col-md-4">
                        <small className="text-muted">Affected Sites:</small>
                        <div className="h5 text-warning mb-0">{groupData.sites}</div>
                      </div>
                      <div className="col-md-4">
                        <small className="text-muted">Completion Rate:</small>
                        <div className="h5 text-success mb-0">
                          {Math.round((groupData.all_entries.filter(e => e.progress_status === 'patched').length / groupData.total_instances) * 100)}%
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* View Options */}
                <div className="mb-3">
                  <div className="btn-group" role="group">
                    <input
                      type="radio"
                      className="btn-check"
                      name="viewOptions"
                      id="view-by-site"
                      value="by_site"
                      checked={selectedView === 'by_site'}
                      onChange={(e) => setSelectedView(e.target.value)}
                    />
                    <label className="btn btn-outline-primary" htmlFor="view-by-site">
                      <i className="fas fa-map-marker-alt me-1"></i>
                      By Site
                    </label>

                    <input
                      type="radio"
                      className="btn-check"
                      name="viewOptions"
                      id="view-all-entries"
                      value="all_entries"
                      checked={selectedView === 'all_entries'}
                      onChange={(e) => setSelectedView(e.target.value)}
                    />
                    <label className="btn btn-outline-primary" htmlFor="view-all-entries">
                      <i className="fas fa-list me-1"></i>
                      All Entries
                    </label>
                  </div>
                </div>

                {/* Site-based View */}
                {selectedView === 'by_site' && (
                  <div className="row">
                    {Object.entries(groupData.entries_by_site).map(([site, entries]) => (
                      <div key={site} className="col-md-6 mb-3">
                        <div className="card">
                          <div className="card-header d-flex justify-content-between align-items-center">
                            <h6 className="mb-0">
                              <i className="fas fa-building me-2"></i>
                              {site}
                            </h6>
                            <span className="badge bg-secondary">{entries.length} entries</span>
                          </div>
                          <div className="card-body p-0">
                            <div className="table-responsive">
                              <table className="table table-sm table-hover mb-0">
                                <thead className="table-light">
                                  <tr>
                                    <th>Assigned To</th>
                                    <th>Status</th>
                                    <th>Last Updated</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {entries.map((entry) => (
                                    <tr key={entry.id}>
                                      <td>
                                        {entry.assigned_to_name ? (
                                          <div>
                                            <div className="fw-bold">{entry.assigned_to_name}</div>
                                            <small className="text-muted">{entry.assigned_to_team_name}</small>
                                          </div>
                                        ) : (
                                          <span className="text-muted">Available</span>
                                        )}
                                      </td>
                                      <td>{getStatusBadge(entry.progress_status)}</td>
                                      <td>
                                        <small>{formatDate(entry.last_updated)}</small>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {/* All Entries View */}
                {selectedView === 'all_entries' && (
                  <div className="table-responsive">
                    <table className="table table-striped table-hover">
                      <thead className="table-dark">
                        <tr>
                          <th>Site</th>
                          <th>Assigned To</th>
                          <th>Team</th>
                          <th>Progress Status</th>
                          <th>Last Updated</th>
                          <th>Progress Notes</th>
                          <th>Patching ETA</th>
                        </tr>
                      </thead>
                      <tbody>
                        {groupData.all_entries.map((entry) => (
                          <tr key={entry.id} className={entry.progress_status === 'patched' ? 'table-success' : ''}>
                            <td>
                              <span className="badge bg-info">
                                {entry.site || entry.assigned_to_site || 'Unknown'}
                              </span>
                            </td>
                            <td>
                              {entry.assigned_to_name ? (
                                <div>
                                  <div className="fw-bold">{entry.assigned_to_name}</div>
                                  <small className="text-muted">
                                    Assigned: {formatDate(entry.assigned_at)}
                                  </small>
                                </div>
                              ) : (
                                <span className="text-muted">Available</span>
                              )}
                            </td>
                            <td>
                              <small className="text-muted">{entry.assigned_to_team_name || 'N/A'}</small>
                            </td>
                            <td>{getStatusBadge(entry.progress_status)}</td>
                            <td>
                              <small>{formatDate(entry.last_updated)}</small>
                            </td>
                            <td>
                              <div className="text-truncate" style={{ maxWidth: '200px' }} title={entry.progress_notes}>
                                {entry.progress_notes || 'No notes'}
                              </div>
                            </td>
                            <td>
                              {entry.patching_est_release_date ? (
                                <div>
                                  <small>{formatDate(entry.patching_est_release_date)}</small>
                                  {entry.patching_status && (
                                    <div>
                                      <span className="badge bg-secondary">{entry.patching_status}</span>
                                    </div>
                                  )}
                                </div>
                              ) : (
                                <span className="text-muted">No ETA</span>
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </>
            )}
          </div>
          
          <div className="modal-footer">
            <button 
              type="button" 
              className="btn btn-secondary"
              onClick={onClose}
            >
              <i className="fas fa-times me-1"></i>
              Close
            </button>
            {groupData && (
              <button 
                type="button" 
                className="btn btn-primary"
                onClick={() => {
                  // Export or generate report functionality could go here
                  console.log('Export vulnerability group report:', groupData);
                }}
              >
                <i className="fas fa-download me-1"></i>
                Export Report
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityGroupModal;
